p1 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s1[i] = s1.0*exp(n*(r-0.5*sig1^2)*T/n+sig1*sqrt(dt)*sum(z))
p1[i]= max((s1[i]-k1),0)
#p.star[i]
}
##generate path for stock2 and option2
c2 = rep(0,M)
s2 = rep(0,M)
p2 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s2[i] = s2.0*exp(n*(r-0.5*sig2^2)*T/n+sig2*sqrt(dt)*sum(z))
p2[i]= max((s2[i]-k2),0)
#p.star[i]
}
## unit price of each option
c1.0 = 0.0640
c2.0 = 0.5266
## number of options in c1 and c2
w1 = 1000
w2 = 100
## value of portfolio at t=0
v0 = w1*c1.0 + w2*c2.0
################### value of portfolio at t=T (MC full evaluation)
v1 = w1*p1 + w2*p2
l.full = v0-v1
################### value of portfolio at t=T (MC delta-gamma approximation)
t=0
## greeks for stock 1
d1s1 = (log(s1.0/k1)+(r+sig1^2/2)*(T-t))/(sig1*sqrt(T-t))
d2s1 = d1s1 - sig1*sqrt(T-t)
delta1 = pnorm(d1s1)
theta1 = -(s1.0*dnorm(d1s1)*sig1)/(2*sqrt(T-t))-r*k1*exp(-r*(T-t))*pnorm(d2s1)
gamma1 = dnorm(d1s1)/(s1.0*sig1*sqrt(T-t))
## greeks for stock 2
d1s2 = (log(s2.0/k2)+(r+sig2^2/2)*(T-t))/(sig2*sqrt(T-t))
d2s2 = d1s2-sig2^2*sqrt(T-t)
delta2 = pnorm(d1s2)
theta2 = -(s2.0*dnorm(d1s2)*sig2)/(2*sqrt(T-t))-r*k2*exp(-r*(T-t))*pnorm(d2s2)
gamma2 = dnorm(d1s2)/(s2.0*sig2*sqrt(T-t))
##
theta = c(theta1,theta2)
delta = diag(c(delta1,delta2))
gamma = diag(c(gamma1,gamma2))
w = c(w1,w2)
delta.s = data.frame(ds1=s1-s1.0,ds2=s2-s2.0)
delta.s = as.matrix(delta.s)
delta.v = rep(t(w)%*%theta*T,M) + as.vector(t(w)%*%delta%*%t(delta.s)) + 1/2*diag(delta.s%*%diag(as.vector(w%*%gamma))%*%t(delta.s))
l.appx = - delta.v
mean(l.full)
mean(l.appx)
## delta-gamma diagonalization
ds1 = s1-s1.0
ds2 = s2-s2.0
ds = cbind(ds1,ds2)
u.ds = colMeans(ds)
cov.ds = cov(ds)
c = t(chol(cov.ds))
## control variate estimator
q = seq(0.3,0.01,by=-0.01)
x = q*v0
n.x = length(x)
p.full = rep(0,n.x)
p.appx = rep(0,n.x)
p.exact = rep(0,n.x)
for (i in 1:n.x)
{
p.full[i] = mean(l.full>x[i])
p.appx[i] = mean(l.appx>x[i])
p.exact[i] = mean(l.exact>x[i])
}
## plot
plot(p.full,xaxt="n",ylab="probability",xlab="Loss:percentage of initial value",type="l",col=2,ylim=range(c(p.appx,p.exact,p.full)))
lines(p.appx,col=3)
lines(p.exact,col=4)
axis(1,at=1:30,labels=paste(q[1:30]*100,"%"))
##generate path for stock1 and option1
n = 100
dt =T/n
M = 1000
c1 = rep(0,M)
s1 = rep(0,M)
p1 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s1[i] = s1.0*exp(n*(r-0.5*sig1^2)*T/n+sig1*sqrt(dt)*sum(z))
p1[i]= max((s1[i]-k1),0)
#p.star[i]
}
##generate path for stock2 and option2
c2 = rep(0,M)
s2 = rep(0,M)
p2 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s2[i] = s2.0*exp(n*(r-0.5*sig2^2)*T/n+sig2*sqrt(dt)*sum(z))
p2[i]= max((s2[i]-k2),0)
#p.star[i]
}
## unit price of each option
c1.0 = 0.0640
c2.0 = 0.5266
## number of options in c1 and c2
w1 = 1000
w2 = 100
## value of portfolio at t=0
v0 = w1*c1.0 + w2*c2.0
################### value of portfolio at t=T (MC full evaluation)
v1 = w1*p1 + w2*p2
l.full = v0-v1
################### value of portfolio at t=T (MC delta-gamma approximation)
t=0
## greeks for stock 1
d1s1 = (log(s1.0/k1)+(r+sig1^2/2)*(T-t))/(sig1*sqrt(T-t))
d2s1 = d1s1 - sig1*sqrt(T-t)
delta1 = pnorm(d1s1)
theta1 = -(s1.0*dnorm(d1s1)*sig1)/(2*sqrt(T-t))-r*k1*exp(-r*(T-t))*pnorm(d2s1)
gamma1 = dnorm(d1s1)/(s1.0*sig1*sqrt(T-t))
## greeks for stock 2
d1s2 = (log(s2.0/k2)+(r+sig2^2/2)*(T-t))/(sig2*sqrt(T-t))
d2s2 = d1s2-sig2^2*sqrt(T-t)
delta2 = pnorm(d1s2)
theta2 = -(s2.0*dnorm(d1s2)*sig2)/(2*sqrt(T-t))-r*k2*exp(-r*(T-t))*pnorm(d2s2)
gamma2 = dnorm(d1s2)/(s2.0*sig2*sqrt(T-t))
##
theta = c(theta1,theta2)
delta = diag(c(delta1,delta2))
gamma = diag(c(gamma1,gamma2))
w = c(w1,w2)
delta.s = data.frame(ds1=s1-s1.0,ds2=s2-s2.0)
delta.s = as.matrix(delta.s)
delta.v = rep(t(w)%*%theta*T,M) + as.vector(t(w)%*%delta%*%t(delta.s)) + 1/2*diag(delta.s%*%diag(as.vector(w%*%gamma))%*%t(delta.s))
l.appx = - delta.v
mean(l.full)
mean(l.appx)
## delta-gamma diagonalization
ds1 = s1-s1.0
ds2 = s2-s2.0
ds = cbind(ds1,ds2)
u.ds = colMeans(ds)
cov.ds = cov(ds)
c = t(chol(cov.ds))
## control variate estimator
q = seq(0.3,0.01,by=-0.01)
x = q*v0
n.x = length(x)
p.full = rep(0,n.x)
p.appx = rep(0,n.x)
p.exact = rep(0,n.x)
for (i in 1:n.x)
{
p.full[i] = mean(l.full>x[i])
p.appx[i] = mean(l.appx>x[i])
p.exact[i] = mean(l.exact>x[i])
}
## plot
plot(p.full,xaxt="n",ylab="probability",xlab="Loss:percentage of initial value",type="l",col=2,ylim=range(c(p.appx,p.exact,p.full)))
lines(p.appx,col=3)
lines(p.exact,col=4)
axis(1,at=1:30,labels=paste(q[1:30]*100,"%"))
##generate path for stock1 and option1
n = 100
dt =T/n
M = 1000
c1 = rep(0,M)
s1 = rep(0,M)
p1 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s1[i] = s1.0*exp(n*(r-0.5*sig1^2)*T/n+sig1*sqrt(dt)*sum(z))
p1[i]= max((s1[i]-k1),0)
#p.star[i]
}
##generate path for stock2 and option2
c2 = rep(0,M)
s2 = rep(0,M)
p2 = rep(0,M)
for (i in 1:M)
{
z = rnorm(n)
s2[i] = s2.0*exp(n*(r-0.5*sig2^2)*T/n+sig2*sqrt(dt)*sum(z))
p2[i]= max((s2[i]-k2),0)
#p.star[i]
}
## unit price of each option
c1.0 = 0.0640
c2.0 = 0.5266
## number of options in c1 and c2
w1 = 1000
w2 = 100
## value of portfolio at t=0
v0 = w1*c1.0 + w2*c2.0
################### value of portfolio at t=T (MC full evaluation)
v1 = w1*p1 + w2*p2
l.full = v0-v1
################### value of portfolio at t=T (MC delta-gamma approximation)
t=0
## greeks for stock 1
d1s1 = (log(s1.0/k1)+(r+sig1^2/2)*(T-t))/(sig1*sqrt(T-t))
d2s1 = d1s1 - sig1*sqrt(T-t)
delta1 = pnorm(d1s1)
theta1 = -(s1.0*dnorm(d1s1)*sig1)/(2*sqrt(T-t))-r*k1*exp(-r*(T-t))*pnorm(d2s1)
gamma1 = dnorm(d1s1)/(s1.0*sig1*sqrt(T-t))
## greeks for stock 2
d1s2 = (log(s2.0/k2)+(r+sig2^2/2)*(T-t))/(sig2*sqrt(T-t))
d2s2 = d1s2-sig2^2*sqrt(T-t)
delta2 = pnorm(d1s2)
theta2 = -(s2.0*dnorm(d1s2)*sig2)/(2*sqrt(T-t))-r*k2*exp(-r*(T-t))*pnorm(d2s2)
gamma2 = dnorm(d1s2)/(s2.0*sig2*sqrt(T-t))
##
theta = c(theta1,theta2)
delta = diag(c(delta1,delta2))
gamma = diag(c(gamma1,gamma2))
w = c(w1,w2)
delta.s = data.frame(ds1=s1-s1.0,ds2=s2-s2.0)
delta.s = as.matrix(delta.s)
delta.v = rep(t(w)%*%theta*T,M) + as.vector(t(w)%*%delta%*%t(delta.s)) + 1/2*diag(delta.s%*%diag(as.vector(w%*%gamma))%*%t(delta.s))
l.appx = - delta.v
mean(l.full)
mean(l.appx)
## delta-gamma diagonalization
ds1 = s1-s1.0
ds2 = s2-s2.0
ds = cbind(ds1,ds2)
u.ds = colMeans(ds)
cov.ds = cov(ds)
c = t(chol(cov.ds))
## control variate estimator
q = seq(0.3,0.01,by=-0.01)
x = q*v0
n.x = length(x)
p.full = rep(0,n.x)
p.appx = rep(0,n.x)
p.exact = rep(0,n.x)
for (i in 1:n.x)
{
p.full[i] = mean(l.full>x[i])
p.appx[i] = mean(l.appx>x[i])
p.exact[i] = mean(l.exact>x[i])
}
## plot
plot(p.full,xaxt="n",ylab="probability",xlab="Loss:percentage of initial value",type="l",col=2,ylim=range(c(p.appx,p.exact,p.full)))
lines(p.appx,col=3)
lines(p.exact,col=4)
axis(1,at=1:30,labels=paste(q[1:30]*100,"%"))
sample()
sample(10)
sample(70:90)
sample(50:100,10)
set.seed(1)
sample(50:100,10)
x=c(64,84,58,94,68,51,87,88,71,61)
mean(x)
sort(x)
68+71
/2
139/2
x[1]
x[3]=0
x
mean(x)
66.8
x
x[3] = 58
x
mean(x)
y = c(54,94,48,99,68,41,97,93,81,51)
mean(y)
var(x)
sd(x)
var(x)
var(y)
sd(y)
library(glm)
glm
2*exp(-2*0.3^2*10)
0.33/2
60\147
60/147
2*exp(-2*0.3^2*10)
?runif
?rep
?rnorm
x = runif(1000,min=10,max=10)
m = 10+2*x
y = rep(0,1000)
for (i in 1:1000)
{
y[i] = rnorm(1,mean=m[i],sd=2)
}
plot(x,y)
x = runif(1000,min=-10,max=10)
m = 10+2*x
y = rep(0,1000)
for (i in 1:1000)
{
y[i] = rnorm(1,mean=m[i],sd=2)
}
plot(x,y)
?abline
x = runif(1000,min=-10,max=10)
m = 10+2*x
y = rep(0,1000)
for (i in 1:1000)
{
y[i] = rnorm(1,mean=m[i],sd=2)
}
plot(x,y)
abline(a=10,b=2)
x = runif(1000,min=-10,max=10)
m = 10+2*x
y = rep(0,1000)
for (i in 1:1000)
{
y[i] = rnorm(1,mean=m[i],sd=2)
}
plot(x,y,col='blue')
abline(a=10,b=2)
x = rnorm(1000,mean=2.5,sd=1) + rnorm(1000,mean=7.5,sd=1)
plot(x)
hist(x)
x = rnorm(1000,mean=1,sd=1) + rnorm(1000,mean=9,sd=1)
hist(x)
x = rnorm(1000,mean=5,sd=2) + rnorm(1000,mean=10,sd=1)
hist(x)
x = 0.5*rnorm(1000,mean=5,sd=2) + 0.5*rnorm(1000,mean=10,sd=1)
hist(x)
x = 0.5*rnorm(1000,mean=1,sd=2) + 0.5*rnorm(1000,mean=10,sd=1)
hist(x)
y1 = rnorm(1000,5,2)
y2 = rnorm(1000,10,1)
w = rbinom(1000,1,.5)
w
x2 = w*y1+(1-w)*y2
hist(x2)
y1 = rnorm(1000,5,2)
y2 = rnorm(1000,10,1)
w = rbinom(1000,1,.5)
x2 = w*y1+(1-w)*y2
hist(x2)
m = 10+2*x2
y = rep(0,1000)
for (i in 1:1000)
{
y[i] = rnorm(1,mean=m[i],sd=2)
}
plot(x2,y)
install.packages("rjags")
install.packages("runjags")
23008
2300*0.044
1500*0.044
0.023*1500
17/647
10/647
37/307
22/307
log(0.05/200)
log(0.05/200)/-0.02
0.22*1.8
0.44*1.8
install.packages("installr")
library(installr)
updateR()
install.packages("blogdown")
library(blogdown)
install_hugo()
blogdown::install_hugo()
fname = tempfile()
fname
download.file("https://cran.uni-muenster.de/", destfile=fname)
file.remove(fname)
options(download.file.method = 'libcurl')
blogdown::install_hugo()
library(blogdown)
install_hugo()
debugonce(install_hugo())
source('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
install_hugo()
library(xgboost)
install_hugo()
debugSource('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
readLines("https://github.com/gohugoio/hugo/releases/latest",
warn = FALSE)
is.character(con)
con
file(con,"r")
install.packages(xgboost)
debugSource('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
s
Q
debugSource('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
readLines("http://github.com/gohugoio/hugo/releases/latest",
warn = FALSE)
?install_hugo
install_hugo(version=0.32)
install_hugo(version=0.32.3)
install_hugo(version=0.31)
debugSource('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
readLines("https://github.com/gohugoio/hugo/releases/latest",
warn = FALSE)
readLines("https://github.com/gohugoio/hugo/releases/tag/v0.32.4",
warn = FALSE)
use_brew
version
version2
base
version2 = as.numeric_version(version)
owd
is_windows()
zipfile
download
debugSource('C:/Users/Wenbo Ma/Desktop/install_hugo.R', echo=TRUE)
zipfile
download2(paste0(base, zipfile), zipfile, mode = "wb")
download
new_site(dir = 'blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
new_site(dir = 'E:\GitHub\blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
setInternet2(TRUE)
install_hugo(version=0.31)
install_hugo()
updateR()
library(blogdown)
install.packages("blogdown")
library(blogdown)
install_hugo()
install_hugo(version=0.32)
library(blogdown)
install_hugo(version=0.31)
library(blogdown)
install_hugo()
library(blogdown)
install_hugo()
devtools::install_github('rstudio/blgodown')
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github('rstudio/blogdown')
blogdown::install_hugo("D:\hugo_0.31_Windows-64bit\hugo.exe")
blogdown::install_hugo("D:\\hugo_0.31_Windows-64bit\\hugo.exe")
blogdown::install_hugo_bin("D:\\hugo_0.31_Windows-64bit\\hugo.exe")
blogdown::install_hugo_bin("D:/hugo_0.31_Windows-64bit/hugo.exe")
blogdown::install_hugo("D:/hugo_0.31_Windows-64bit/hugo.exe")
?blgodown::install_hugo
?blogdown::install_hugo
blogdown::install_hugo_bin("D:/hugo_0.31_Windows-64bit/hugo.exe")
blogdown:::install_hugo_bin("D:/hugo_0.31_Windows-64bit/hugo.exe")
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
options(download.file.method = "wget", download.file.extra = c("--no-check-certificate"))
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
options(download.file.method="libcurl")
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
options(download.file.method = "wget", download.file.extra = c("--no-check-certificate"))
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
options(download.file.method="wininet")
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
temp = tempfile()
download.file(url='https://github.com/kakawait/hugo-tranquilpeak-theme/archive/master.zip',destfile=temp, method="libcurl")
options(download.file.method="libcurl")
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
?new_site
new_site(dir = 'E:/GitHub/blogdown_source')
new_site(dir = 'E:/GitHub/blogdown_source',theme=NA)
install.packages('later')
new_site(dir = 'E:/GitHub/blogdown_source',theme=NA)
devtools::install_github('rstudio/blgodown')
devtools::install_github('rstudio/blogdown')
library(blogdown)
new_site(dir = 'blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
new_post(title='new_page.Rmd')
build_site()
new_site(dir="E:/GitHub/blogdown_source",format='toml')
new_site(dir = 'E:/GitHub/blogdown_source',
theme = 'kakawait/hugo-tranquilpeak-theme',
format = 'toml')
setwd("E:/Project/Website/blog_source/content/post")
setwd("E:/Project/Website/blog_source")
blogdown:::serve_site()
